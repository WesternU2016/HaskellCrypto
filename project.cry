module Project where

    type AES128 = 4
    type AES192 = 6
    type AES256 = 8

    type Nk = AES128
    type Nb = 4
    type Nr = 6 + Nk

    type AESKeySize = (Nk*32)

    type GF28 = [8]
    type State = [4][Nb]GF28
    type RoundKey = State
    type KeySchedule = (RoundKey, [Nr-1]RoundKey,RoundKey)

    gf28Add : {n} (fin n) => [n]GF28 -> GF28
    gf28Add ps = sums ! 0
        where sums = [zero] # [p^s|p<-ps|s<-sums]
    
    irreducible : {a} (fin a, a>=9) => [a]
    irreducible = <| x^^8 + x^^4 + x^^3 + x + 1 |>

    gf28mult : (GF28, GF28) -> GF28
    gf28mult (x,y) = pmod(pmult x y) irreducible

    gf28Pow : (GF28,[8]) -> GF28
    gf28Pow (n,k) = pow k
        where sq x = gf28mult (x,x)
              odd x = x ! 0
              pow i = if i == 0 then 1
                      else if odd 1
                           then gf28Mult(n, sq (pow ( i >> 1)))
                           else sq (pow (i >> 1))
    
    gf28Inverse : GF28 -> GF28
    gf28Inverse x = gf28Pow (x,254)

    gf28DotProduct : {n} (fin n) => ([n]GF28)