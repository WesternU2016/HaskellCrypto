    // Construct a machine out of parts
    mkEnigma : {n} (Plugboard, [n]Rotor, Reflector, [n]Char) -> Enigma n
    mkEnigma (pboard, rs, refl, startingPositions) =
    { plugboard = pboard
    , rotors = [ r <<< (s - 'A')
    | r <- rs
    | s <- startingPositions
    ]
    , reflector = refl
    }

    // Encryption/Decryption
    enigma : {n, m} (fin n, fin m) => (Enigma n, String m) -> String m
    enigma (m, pt) = tail [ c | (_, c) <- rcs ]
    where rcs = [(m.rotors, '*')] #
    [ enigmaLoop (m.plugboard, r, m.reflector, c)
    | c <- pt
    | (r, _) <- rcs
    ]

    // Decryption is the same as encryption:
    © 2010–2016, Galois, Inc.
    // dEnigma : {n, m} (fin n, fin m) => (Enigma n, String m) -> String m
    dEnigma = enigma


    // Build an example enigma machine:
    plugboard : Plugboard
    plugboard = "HBGDEFCAIJKOWNLPXRSVYTMQUZ"

    rotor1, rotor2, rotor3 : Rotor
    rotor1 = mkRotor ("RJICAWVQZODLUPYFEHXSMTKNGB", "IO")
    rotor2 = mkRotor ("DWYOLETKNVQPHURZJMSFIGXCBA", "B")
    rotor3 = mkRotor ("FGKMAJWUOVNRYIZETDPSHBLCQX", "CK")

    reflector : Reflector
    reflector = "FEIPBATSCYVUWZQDOXHGLKMRJN"

    modelEnigma : Enigma 3
    modelEnigma = mkEnigma (plugboard, [rotor1, rotor2, rotor3], reflector, "GCR")

    /* Example run:

    cryptol> :set ascii=on
    cryptol> enigma (modelEnigma, "ENIGMAWASAREALLYCOOLMACHINE")
    UPEKTBSDROBVTUJGNCEHHGBXGTF
    cryptol> dEnigma (modelEnigma, "UPEKTBSDROBVTUJGNCEHHGBXGTF")
    ENIGMAWASAREALLYCOOLMACHINE
    */

    all: {a, n} (fin n) => (a->Bit) -> [n]a -> Bit
    all fn xs = folds ! 0 where
    folds = [True] # [ fn x && p | x <- xs
    | p <- folds]
    checkReflectorFwdBwd : Reflector -> Bit
    checkReflectorFwdBwd refl = all check ['A' .. 'Z']
    where check c = substFwd (refl, c) == substBwd (refl, c)
